									Python
Python is an interpreted, high-level, general-purpose programming language,Created by Guido van Rossum and first released in 1991.
Python's design philosophy emphasizes code readability with its notable use of significant whitespace.

>> Why python is required-

>> where we use python- Business Applications, Software Development, Education, Machine Learning and Artificial Intelligence, Data Science and Data Visualization.
									
									Lets get started

>> Variables- Where we have to store the values are called variables. For ex:- x=10. Here x-> variable and 10 is value.

>> Data Types- Types where we can store the data like string, integer, float etc.

Text Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memoryview

For ex-
		
X=” Hello World”			        str
x = 20						int	
x = 20.5					float	
x = 1j						complex	
x = ["apple", "banana", "cherry"]		list	
x = ("apple", "banana", "cherry")		tuple	
x = range(6)					range	
x = {"name" : "John", "age" : 36}		dict	
x = {"apple", "banana", "cherry"}		set	
x = frozenset({"apple", "banana", "cherry"})	frozenset	
x = True					bool	
x = b"Hello"					bytes	
x = bytearray(5)				bytearray	
x = memoryview(bytes(5))			memoryview	

>> Python casting- There may be times when you want to specify a type on to a variable. This can be done with casting. There are 3 types to do-

	>>  int() - constructs an integer number from an integer literal, a float literal or a string literal (providing the string represents a whole number)
   	>> float() - constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)
 	>>  str() - constructs a string from a wide variety of data types, including strings, integer literals and float literals.
for ex-

int-
x = int(1)   # x will be 1
y = int(2.8) # y will be 2
z = int("3") # z will be 3

float
x = float(1)     # x will be 1.0
y = float(2.8)   # y will be 2.8
z = float("3")   # z will be 3.0
w = float("4.2") # w will be 4.2

str
x = str("s1") # x will be 's1'
y = str(2)    # y will be '2'
z = str(3.0)  # z will be '3.0' 

							>> python String (23-APR-2020)

- We can't concatenate the string with the numbers( it can be any string). To do this, we have to use FORMAT keyword. Below is the example-

s=200
d= print(" the number is " +s)
print (d) ->>>output--> TypeError: can only concatenate str (not "int") to str

----- The correct way to do is as mentioned below-
s=200
d= " the number is {}"
 print(d.format(s))  -->> output- the number is 200.

we can work with multiple numbers like-

s=200
e=300
f=400
g=s+e+f
d=" the number is {},{} and {} and the addition of 3 numbers are {} "
print(d.format(s,e,f,g)) -->> output- the number is 200,300 and 400 and the addition of 3 numbers are 900


>> Multiline Strings- We have to use three double quotes to assign multiline String

s= """ this is me,
this is you,
this is someone else """
print(s)

>> Length of String- We have length function to get the length of the String (including spaces)-

s= "This is me"
print(len(s)) --> output-> 10

>> String Methods-- 
	
> strip- It will remove the spaces from the starting and the ending-
p= " hello world "
print(p.strip())-- > output -- > hello world

> lower- Converts all the character from upper to lower-
p= " HELLO WORLD "
print(p.lower()) --> output --> hello world

> upper- Converts All the charcater from lower to Upper
p= " hello world "
print(p.upper()) --> output --> HELLO WORLD

> replace -- replaced from --> to
p= " hello world "
print(p.replace(" hello", " bye")) --> output --> bye world

> capitalize- Converts the first character to upper case
p= "hello World"
print(p.capitalize()) --> output --> Hello world

> count-- Returns the number of times a specified value occurs in a string
p= " this is some this is you this is me "
print(p.count("this")) --> output --> 3

> find-Searches the string for a specified value and returns the position of where it was found
p= "hello World"
print(p.find("ell"))--> output --> 1

> isalnum()- Returns True if all characters in the string are alphanumeric
p= "bottle12344"
print(p.isalnum()) --> output --> True
q= " bottle1234"
print(p.isalnum()) --> output --> False
q= "bottle1234@"
print(p.isalnum()) --> output --> False

> isalpha()- Returns True if all characters in the string are in the alphabet
s="bottle"
print(s.isalpha()) --> output --> True

> isdigit()- Returns True if all characters in the string are digits
s="200"
print( s.isdigit()) --> output --> True

> islower()-Returns True if all characters in the string are lower case
e="lower"
print(e.islower()) --> output --> True

> isupper() - Returns True if all characters in the string are upper case
f= "UPPER"
print(f.isupper()) --> output --> True

> isnumeric()- Returns True if all characters in the string are numeric
g= "200"
print(g.isnumeric()) --> output --> True

> isspace()- Returns True if all characters in the string are whitespaces
t=" "
print(t.isspace()) --> output --> True

> lstrip()- Remove spaces to the left of the string:
x = txt.rstrip()
print("of all fruits", x, "is my favorite") --> output --> of all fruits banana      is my favorite

> rfind() -Searches the string for a specified value and returns the last position of where it was found
txt = " bottle water"
pritn(txt.rfind("ott")) --> output --> 2
 
> rindex()- Searches the string for a specified value and returns the last position of where it was found
txt = " bottle water"
print(txt.rfind("ott")) --> output --> 2

> rsplit()-Splits the string at the specified separator, and returns a list
rstrip() -- Remove spaces to the right of the string:
txt = "     banana     "
x = txt.rstrip()
print("of all fruits", x, "is my favorite") --> output --> of all fruits      banana is my favorite

> split() - Splits the string at the specified separator, and returns a list
txt = " bottle water"
x = print(txt.rsplit()) --> output -->  ['bottle', 'water']

>splitlines() - Splits the string at line breaks and returns a list
txt = "Thank you for the music\nWelcome to the jungle"
print(txt.splitlines()) --> output -->['Thank you for the music', 'Welcome to the jungle'] 

> strip() - Remove spaces at the beginning and at the end of the string:
txt = "     banana     "
x = txt.strip()
print("of all fruits", x, "is my favorite") --> output --> of all fruits banana is my favorite

> swapcase()- Make the lower case letters upper case and the upper case letters lower case
txt = "Hello My Name Is PETER"
print(txt.swapcase()) --> output --> hELLO mY nAME iS peter

								> python Operators (26-04-2020)

Python divides the operators in the following groups:

>  Arithmetic operators
>  Assignment operators
>  Comparison operators
>  Logical operators
>  Identity operators
>  Membership operators
>  Bitwise operators

>>   Arithmetic operators- 1. Addition(x+y) 2.Subtraction(x-y) 3.Multiplication(x*y) 4.Division(x/y) 5.Modulus (x % y) 6.Exponentiation (x**y) 7. Floor division(x // y)

>>   Assignment operators- x = 5 same as x = 5
			   x += 3 same as x = x + 3
			   x -= 3 same as x = x - 3 
			   x *= 3 same as x = x * 3 
			   x /= 3 same as x = x / 3 
			   x %= 3 same as x = x % 3
			   x //= 3 same as x = x // 3
			   x **= 3 same as x = x ** 3

>>  Comparison operators- 		 
		  Equal 	x == y 	
		 Not equal 	x != y 	
		 Greater than 	x > y 	
		 Less than 	x < y 	
		 Greater than or equal to 	x >= y 	
		 Less than or equal to 	x <= y 	

>>  Logical operators-
		>> and- Returns True if both statements are true . -->x < 5 and  x < 10 	
		>> or- 	Returns True if one of the statements is true. --> x < 5 or x < 4 	
		>> not-	Reverse the result, returns False if the result is true. --> not(x < 5 and x < 10)

>>  Identity operators
		>> is- Returns True if both variables are the same object. --> x is y 	
		>> is not- Returns True if both variables are not the same object-- >x is not y

>>  Membership operators
		>> in- Returns True if a sequence with the specified value is present in the object. --> x in y 	
		>> not in- Returns True if a sequence with the specified value is not present in the object. --> x not in y

>  Bitwise operators
		>> &--> AND--> Sets each bit to 1 if both bits are 1
		>> |--> OR--> Sets each bit to 1 if one of two bits is 1
		>> ~--> NOT--> Inverts all the bits

								>> Python collections-

There are four collection data types in the Python programming language:

> List is a collection which is ordered and changeable. Allows duplicate members. Denotes as []
> Tuple is a collection which is ordered and unchangeable. Allows duplicate members. Denotes as ()
> Set is a collection which is unordered and unindexed. No duplicate members. Denotes as {}
> Dictionary is a collection which is unordered, changeable and indexed. No duplicate members. Denotes as {key:value}

							     >> python Lists (27-04-2020)

> List is a type of collection object which is used to store the data. We will denote List in []. For ex- s=[1,2,3,4].
> List can contain duplicate values like s=[1,2,3,4,2,1,1].
> It always starts with the indexing 0.

Below are some in-built functions for the list-

> append() - Adds an element at the end of the list
s= [1,2,3,4]
s.append(5)
print(s) --> output -->  [1, 2, 3, 4, 5]

> len() - to find the length of the list
s= [1,2,3,4]
print(len(s)) --> output --> 4

> clear() - Removes all the elements from the list
s= [1,2,3,4]
s.clear
print(s) --> output -->  []

> count() - Returns the number of elements with the specified value
s= [1,2,3,4]
v= s.count(2)
print(v) --> output -->  2

> extend() - Add the elements of a list (or any iterable), to the end of the current list
s= [1,2,3,4]
b= [5,6,7,8]
s.extend(b)
print(s) --> output -->  [1, 2, 3, 4, 5, 6, 7, 8]

> index() - Returns the index of the first element with the specified value
s= [1,2,3,4]
print(s.index(1)) --> output -->  1

> insert() - Adds an element at the specified position
s= [1,2,3,4]
s.insert(4,5)
print(s) --> output -->  [1, 2, 3, 4, 5]

> pop() - Removes the element at the specified position
s= [1,2,3,4]
s.pop(2)
print(s) --> output -->  [1, 2, 4]

> remove() - Removes the item with the specified value
s= [1,2,3,4]
s.remove(3)
print(s) --> output -->  [1, 2, 4]

> reverse() - Reverses the order of the list
s= [2,3,4,1]
s.reverse 
print(s) --> output -->  [1, 2, 3, 4]

> sort() - Sorts the list
s= [2,3,4,1]
s.sort() #By default it will give the arrange the order in ascending. To make it we have to use reverse=True
print(s) --> output -->  [1, 2, 3, 4]
s.sort(reverse=True)
print(s) --> output --> [4, 3, 2, 1]

> How to check if any item exits in the list
s=[1,2,3,4]
if(1 in s):
  {
print(" statement is True")
}
else:
  {
print(" statement is False")
} # --> output --> statement is True

> Join 2 or more lists
s= [1,2,3,4]
b= [5,6,7,8]
c=[9,10,11,12]
d=s+b+c
print(d) --> output --> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]


									>> Tuple - 

> Tuple is also a type of collection object which is used to store the data. We will denote List in (). For ex- s=(1,2,3,4).
> Tuple can contain duplicate values like s=(1,2,3,4,2,1,1).
> It always starts with the indexing 0.
> The main advantage of having tuple is because it is IMMMUTABLE which means once created we can't change anything.

	> Things which we can't do on tuple-
		> insert
		> append
		> pop
		> clear
		> sort
		> remove
		> extend
		> del

	> Things which we can do on tuple are mentioned below- 

> To print all the records-

thistuple = ("apple", "banana", "cherry")
for x in thistuple:
  print(x) 

output are mentioned below - 
apple
banana
cherry

> We can check the length and item in the tuple how we have done in the list.

> How to create a tuple with a single record- If you are going to create a tuple like this s= "apple" then python will consider this as a string not a tupele. 
Let's try-
s="apple"
print(s) --> output --> apple
print(type(s)) --> output --> <class 'str'>

To create a tuple with a single record we have to use comma(,) after the records- for ex-
s=("apple",)
print(s) --> output --> apple
print(type(s)) --> output --> <class 'tuple'>

>> Tuple is having 2 functions which are used below-

> Count- Returns the number of times a specified value occurs in a string
s=("apple","banana","banana")
v=s.count("banana")
print(v) --> output --> 2

> index() - Searches the tuple for a specified value and returns the position of where it was found.

thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)
x = thistuple.index(8)
print(x) --> output --> 3

									>> Set-

> Set is also a type of collection object which is used to store the data. We will denote List in {}. For ex- s={1,2,3,4}.
> Set doesn't contain duplicate values like s={1,2,3,4,2,1,1} and if you run the program you will get the distinct ouput. Here the output will be {1, 2, 3, 4}
> The most important factor is set doesn't contain any indexes and the stored data is unordered, which means we have to know the values of the set because
we can't perform any action based on indexes.

add() - Adds an element to the set
s = {"apple", "banana", "lion"}
s.add(" cow")
print(s) --> output --> {'cow', 'lion', 'apple', 'banana'}
 
clear() - Removes all the elements from the set
s = {"apple", "banana", "lion"}
print(s) --> output --> {}

discard() - Remove the specified item
s = {"apple", "banana", "lion"}
s.discard("apple")
print(s) --> output --> {"banana", "lion"}
 
pop() - Removes an element from the set
s = {"apple", "banana", "lion"}
s.pop()
print(s) --> output --> {"banana", "lion"}
 
remove() - Removes the specified element
s = {"apple", "banana", "lion"}
s.remove("lion")
print(s) --> output --> {"apple", "banana"}
 
union() - Return a set containing the union of sets
s = {"apple", "banana", "apple"}
g= {"more","cream"}
h= s.union(g)
print(h) --> output --> {'more', 'cream', 'apple', 'banana'}
 
update() - Update the set with the union of this set and others
s = {"apple", "banana", "lion"}
s.update(["more","pig"])
print(s) --> output --> {'apple', 'banana', 'more', 'lion', 'pig'}

IMP POINTS-

>> remove and discard are for deleting the records. The main difference between both of them is the item which you are going to remove from the set is not present, remoce will 
throw the error but discard will not.
>> update and union are to update the set, but union method will combine 2 sets where as update method will insert the set of 1st record into 2nd one.

									>> Dictionary

> Dictionary are stored in the form of key and value pair, in the curly brackets. For ex- {key:value}
> Left side called key and right side called value.
> Dictionary is unordered and indexed.

>> Below function can be used with Dictionary--

clear() - Removes all the elements from the dictionary
car =	{"brand": "Ford",  "model": "Mustang",  "year": 1964}
car.clear()
print(car) --> output --> {}

fromkeys() - Returns a dictionary with the specified keys and value
car =	{"brand": "Ford",  "model": "Mustang",  "year": 1964}
print(car.fromkeys()) --> output -->

get() - Returns the value of the specified key
car =	{"brand": "Ford",  "model": "Mustang",  "year": 1964}
print(car.get("brand")) --> output --> Ford

items() - Returns a list containing a tuple for each key value pair
car =	{"brand": "Ford",  "model": "Mustang",  "year": 1964}
print(car.get(items)) --> output --> dict_items([('brand', 'Ford'), ('model', 'Mustang'), ('year', 1964)])

keys() - Returns a list containing the dictionary's keys
car =	{"brand": "Ford",  "model": "Mustang",  "year": 1964}
print(car.keys()) --> output --> dict_keys(['brand', 'model', 'year'])

values() - Returns a list of all the values in the dictionary
car =	{"brand": "Ford",  "model": "Mustang",  "year": 1964}
print(car.values()) --> output --> dict_values(['Ford', 'Mustang', 1964])

pop() - Removes the element with the specified key
car =	{"brand": "Ford",  "model": "Mustang",  "year": 1964}
print(car.pop("brand")) --> output --> Ford
print(car) --> output --> {'model': 'Mustang', 'year': 1964}

popitem() - Removes the last inserted key-value pair
car =	{"brand": "Ford",  "model": "Mustang",  "year": 1964}
print(car.popitem()) --> output --> ('year', 1964)
print(car) --> output --> {'brand': 'Ford', 'model': 'Mustang'}

update() - Updates the dictionary with the specified key-value pairs
car =	{"brand": "Ford",  "model": "Mustang",  "year": 1964}
car.update({"brand":"Audi"})
print(car) --> output --> {'brand': 'Audi', 'model': 'Mustang', 'year': 1964}

									User input-

We have to use input keyword to get the input from the user. By default input type is STRING. To convert into other format we have to use int, float. for ex-

a= int(input(" Enter the 1st number "))
b= int(input(" Enter the 2nd number "))
print(type(a))
print(type(b))
c=a+b
print(c)

									Condtional Statements

Python supports the usual logical conditions from mathematics:

    Equals: a == b
    Not Equals: a != b
    Less than: a < b
    Less than or equal to: a <= b
    Greater than: a > b
    Greater than or equal to: a >= b

In python there are 3 conditonal statements-

1. If
2. If->else
3. If->elif->else

>> If else-> In if, IF the condition is true then it will execute that part if it is wrong then it will execute the ELSE part. For ex-

a=1
if (a==1):
    print("correct")
else:
    print("wrong")

>> if-elif-else-> elif is a combination of (else+if) which means if not then execute the other one. The reason why we are using else in seperate because if all
the logics are failed then we need something to print as a output so for that we need ELSE. for ex-

a=4
if(a==1):
    print("one")
elif(a==2):
    print("two")
elif(a==3):
    print("three")
elif(a==4):
    print("four")

output->4

Here we have given input as 4, but what if a=5 then in the above program we will not get any output. To get the output we need seperate ELSE condition. For ex-

a=5
if(a==1):
    print("one")
elif(a==2):
    print("two")
elif(a==3):
    print("three")
elif(a==4):
    print("four")
else:
    print("wrong input")

										Looping Statements-
Python has two primitive loop commands:

    while loops
    for loops

>> while -

> While loop holds expression.
> Expression gives the result as Boolean type means either true or false. 
> If the result is true, then while loop executes till condition reaches to false 
> If the result is false, then while loop terminates. 
> As per while loop syntax, the checking of expression will be done at first only.
> So, if expression returns false then it displays nothing. 
 
 For ex-
i = 1
while i < 6:
  print(i)
  i += 1

>> For-

> A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)

> Loop through the letters in the word "banana":

for x in "banana":
	print(x)
										Break and continue statement-
 
Break- With the break statement we can stop the loop before it has looped through all the items. We can use break with if, ifelif, for. For ex-

fruits=["apple","banana","cherry"]
for s in fruits:
    if(s=="banana"):
        break
    print(s)

output- aaple

Continue- With the continue statement we can stop the current iteration of the loop, and continue with the next. We can use break with if, ifelif, for.

fruits=["apple","banana","cherry"]
for s in fruits:
    if(s=="banana"):
        break
    print(s)

output- 
apple
cherry
